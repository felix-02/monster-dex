{"version":3,"sources":["components/card/Card.js","components/cardlist/CardList.js","components/searchbox/SearchBox.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","src","x","id","alt","name","email","CardList","className","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","res","json","users","catch","this","filitered","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"qSAYeA,MAVf,SAAcC,GACV,OACI,6BACI,yBAAKC,IAAG,gCAA2BD,EAAME,EAAEC,GAAnC,cAAmDC,IAAI,KAC/D,4BAAMJ,EAAME,EAAEG,MACtB,2BAAIL,EAAME,EAAEI,SCODC,MAVf,SAAkBP,GACd,OACI,yBAAKQ,UAAU,aACVR,EAAMS,SAASC,KAAI,SAACR,GAAD,OAChB,kBAAC,EAAD,CAAMS,IAAKT,EAAEC,GAAID,EAAGA,SCCrBU,MANf,YAAgD,IAA5BC,EAA2B,EAA3BA,YAAYC,EAAe,EAAfA,aAC5B,OACI,2BAAOC,KAAK,SAASF,YAAaA,EAAaG,SAAUF,KCsClDG,E,kDAtCb,WAAYjB,GAAQ,IAAD,8BACjB,cAAMA,IAgBRc,aAAa,SAACI,GACX,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAfvC,EAAKC,MAAQ,CACXd,SAAU,GACVW,YAAY,IALG,E,gEASE,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAAD,OAAW,EAAKT,SAAS,CAAEV,SAAUmB,OAC1CC,U,+BAQK,IAAD,EAEsBC,KAAKP,MAA3Bd,EAFA,EAEAA,SAASW,EAFT,EAESA,YACVW,EAAUtB,EAASuB,QAAO,SAAA9B,GAC9B,OAAOA,EAAEG,KAAK4B,cAAcC,SAASd,EAAYa,kBAGnD,OACE,6BACE,+CACA,kBAAC,EAAD,CAAWpB,YAAY,cAAcC,aAAcgB,KAAKhB,eACxD,kBAAC,EAAD,CAAUL,SAAUsB,S,GAjCVI,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdrB,OAAM,SAAAsB,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.598c8644.chunk.js","sourcesContent":["import React from 'react'\nimport './card-styles.css'\nfunction Card(props) {\n    return (\n        <div>\n            <img src={` https://robohash.org/${props.x.id}?set=set2 `} alt=\"\"/>\n            <h1 >{props.x.name}</h1>\n    <p>{props.x.email}</p>\n        </div>\n    )\n}\n\nexport default Card\n","import React from 'react'\nimport './cardlist-styles.css'\nimport Card from '../card/Card'\n\nfunction CardList(props) {\n    return (\n        <div className=\"card-list\">\n            {props.monsters.map((x) => (\n                <Card key={x.id} x={x}/>\n            ))}\n        </div>\n    )\n}\n\nexport default CardList\n","import React from 'react'\n\n\nfunction SearchBox({placeholder,handleChange}) {\n    return (\n        <input type=\"search\" placeholder={placeholder} onChange={handleChange} />\n    )\n}\n\nexport default SearchBox\n","import React, { Component } from \"react\";\nimport CardList from \"./components/cardlist/CardList\";\nimport SearchBox from \"./components/searchbox/SearchBox\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      monsters: [],\n      searchField:''\n    };\n   \n  }\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((res) => res.json())\n      .then((users) => this.setState({ monsters: users }))\n      .catch();\n  }\n\n\n  handleChange=(e)=>{\n     this.setState({ searchField: e.target.value })\n  }\n\n  render() {\n\n    const {monsters,searchField}=this.state;\n    const filitered=monsters.filter(x=>{\n      return x.name.toLowerCase().includes(searchField.toLowerCase())\n    })\n\n    return (\n      <div>\n        <h1>monster rolodex</h1>\n        <SearchBox placeholder=\"search here\" handleChange={this.handleChange} />\n        <CardList monsters={filitered} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}